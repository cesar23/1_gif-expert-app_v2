{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifts.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","action","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifts","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","Images","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+MAGaA,EAAY,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAAiB,EAENC,mBAAS,IAFH,mBAEjCC,EAFiC,KAEtBC,EAFsB,KAexC,OACI,mCACI,sBAAMC,OAAO,GAAGC,SAXL,SAACC,GAChBA,EAAEC,iBAEEL,EAAWM,OAAOC,OAAO,GACzBT,GAAc,SAAAU,GAAI,OAAGR,GAAH,mBAAiBQ,QAOnC,SACI,uBAAOC,KAAK,OACLC,MAAOV,EACPW,SAjBD,SAACP,GACfH,EAAcG,EAAEQ,OAAOF,e,QCHlBG,EAAY,SAAC,GAAiB,EAAhBC,GAAiB,IAAdC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,IAEhC,OACG,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNDK,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACTN,EAFe,iDAEkCO,UAAUF,GAF5C,6BACN,oCADM,SAIFG,MAAMR,GAJJ,cAIfS,EAJe,gBAKAA,EAAKC,OALL,uBAKdC,EALc,EAKdA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXrB,kBAedY,GAfc,4CAAH,sDCGTK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECHZ,SAACA,GAAW,MAEXtB,mBAAS,CAC7B4B,KAAK,GACLO,SAAQ,IAJuB,mBAE5BC,EAF4B,KAEtBC,EAFsB,KAkCnC,OA1BAC,qBAAU,WAGNjB,EAASC,GACJiB,MAAK,SAAAC,GAIEC,QAAQC,IAAIF,GACZH,EAAS,CACLT,KAAKY,EACLL,SAAQ,SAM1B,CAACb,IASIc,ED3BqBO,CAAarB,GAA7BsB,EAJuB,EAI5BhB,KAAYO,EAJgB,EAIhBA,QAUnB,OACE,qCACI,6BAAKb,IAEJa,GAAW,mBAAGjB,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,+CAAf,SAKQ0B,EAAOd,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aE3BtB8B,EAAe,WAAM,MAEM7C,mBAAS,CAAC,cAFhB,mBAEvB8C,EAFuB,KAEX/C,EAFW,KAQ9B,OACI,qCACI,2CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAIQ+C,EAAWhB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCpBjCyB,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7819bfb9.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory=({setCategories})=>{\r\n\r\n    const [inputValue,setInputValue] =useState('')\r\n    const handleInput=(e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        // si el campo no es  vacio\r\n        if (inputValue.trim().length>2){\r\n            setCategories(cats=>[inputValue,...cats]);\r\n        }\r\n\r\n\r\n    }\r\n    return(\r\n        <>\r\n            <form action=\"\" onSubmit={handleSubmit}>\r\n                <input type=\"text\"\r\n                       value={inputValue}\r\n                       onChange={handleInput}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\n\r\n\r\nexport const GifGridItem=({id,title,url})=>{\r\n\r\n    return(\r\n       <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={title} />\r\n           <p>{title}</p>\r\n       </div>\r\n    )\r\n}\r\n","\r\n\r\n// funcion que  realiza el request a una api\r\nexport  const getGifts = async (category) => {\r\n    const _api_key='Nj4fErAy4lvAPrZOrTwFPoK4UfGggZdz'\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=${_api_key}`\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n\r\n        }\r\n    })\r\n    return gifs\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {GifGridItem} from \"./GifGridItem\";\r\n\r\n\r\nimport {useFetchGifs} from '../hooks/useFetchGifs'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    //  1. llamamos al hook creado por nonostros\r\n    const {data:Images,loading}=useFetchGifs(category);\r\n\r\n    // Se  ejecutara solo una  vez\r\n    // useEffect(() => {\r\n    //     getGifts(category).then(imgs=> setImages(imgs));\r\n    // }, [category])\r\n    //\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n          <h3>{category}</h3>\r\n          {/* 2. si aun no carga */}\r\n          {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n          <div className=\"card-grid  animate__animated animate__fadeIn\">\r\n\r\n\r\n              {\r\n                  // 3. Aqui mostramos el contenido de cada imagen\r\n                  Images.map(img => (\r\n                      <GifGridItem\r\n                          key={img.id}\r\n                          {...img}\r\n                      />\r\n                  ))\r\n              }\r\n\r\n\r\n\r\n          </div>\r\n      </>\r\n    )\r\n}\r\n","import {useEffect, useState} from \"react\";\r\nimport {getGifts} from \"../helpers/getGifts\";\r\n\r\nexport const useFetchGifs =(category)=>{\r\n    // 1. Seteamos el estado\r\n    const [state,setState] =useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    // 2. Seteamos el estado\r\n    useEffect(()=>{\r\n\r\n        //3.llamamos aqui a la  funcion que  nos devuelve una  promesa\r\n        getGifts(category)\r\n            .then(imgs=>{\r\n\r\n                //4. Aqui actualizamos el estado  con la  respuesta del request\r\n\r\n                    console.log(imgs)\r\n                    setState({\r\n                        data:imgs,\r\n                        loading:false\r\n                    })\r\n\r\n\r\n\r\n            } );\r\n    },[category])\r\n\r\n    // setTimeout(()=>{\r\n    //     setState({\r\n    //         data:[1,2,3,4,5],\r\n    //         loading:false\r\n    //     })\r\n    // },3000)\r\n\r\n    return state\r\n}\r\n","import React, {useState} from 'react'\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport {GifGrid} from \"./components/GifGrid\";\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categorias =['One punch','Samurai X','Dragon Ball']\r\n    const [categories, setCategories] = useState(['One punch'])\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories([...categories,'otro'])\r\n    //     setCategories(cats=>[...cats,'otro'])\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpert</h2>\r\n            {/*   1. Formulario donde haremos la busqueda con enter */}\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n\r\n                    /*   2. Cuando busquemos las  categoria seteadas en  hook haremos la  busqueda */\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from \"./GifExpertApp\";\n\n\nReactDOM.render(\n    <GifExpertApp />\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}